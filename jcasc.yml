jenkins:
  clouds:
  - kubernetes:
      connectTimeout: 5
      containerCapStr: "10"
      credentialsId: "k8s-core-demo-jenkins-sa"
      defaultsProviderTemplate: "default-jnlp"
      maxRequestsPerHostStr: "32"
      name: "kubernetes"
      namespace: "core-demo"
      readTimeout: 15
      serverCertificate: |-
        ${core-k8s-cert}
      templates:
      - containers:
        - args: "/var/jenkins_config/jenkins-agent"
          command: "/bin/sh"
          image: "gcr.io/core-workshop/k8s-jnlp-agent@sha256:28490f8659bcfdae8159286d6c88fdd7365d6928255103e7500f05dd527bdc8f"
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          name: "jnlp"
          ttyEnabled: true
        label: "default-jnlp"
        name: "default-jnlp"
        nodeSelector: "type=master"
        nodeUsageMode: "NORMAL"
        serviceAccount: "jenkins"
        volumes:
        - configMapVolume:
            configMapName: "jenkins-agent"
            mountPath: "/var/jenkins_config"
        workspaceVolume:
          emptyDirWorkspaceVolume:
            memory: false
        yaml: |-
          apiVersion: v1
          kind: Pod
          metadata:
            name: default-jnlp
          spec:
            containers:
            - args:
              - /var/jenkins_config/jenkins-agent
              command:
              - /bin/sh
              image: gcr.io/core-workshop/k8s-jnlp-agent@sha256:28490f8659bcfdae8159286d6c88fdd7365d6928255103e7500f05dd527bdc8f
              imagePullPolicy: IfNotPresent
              name: jnlp
              resources: {}
              tty: true
              securityContext:
                runAsUser: 1000
            securityContext:
              runAsUser: 1000
        yamlMergeStrategy: "merge"
        yamls:
        - |-
          apiVersion: v1
          kind: Pod
          metadata:
            name: default-jnlp
          spec:
            containers:
            - args:
              - /var/jenkins_config/jenkins-agent
              command:
              - /bin/sh
              image: gcr.io/core-workshop/k8s-jnlp-agent@sha256:28490f8659bcfdae8159286d6c88fdd7365d6928255103e7500f05dd527bdc8f
              imagePullPolicy: IfNotPresent
              name: jnlp
              resources: {}
              tty: true
              securityContext:
                runAsUser: 1000
            securityContext:
              runAsUser: 1000
unclassified:
  globallibraries:
    libraries:
    - defaultVersion: "master"
      name: "kypseli"
      retriever:
        modernSCM:
          scm:
            github:
              credentialsId: "cbdays-github-token"
              repoOwner: "kypseli"
              repository: "pipeline-library"
jobs:
  - script: >
      organizationFolder('kypseli') {
        description('GitHub Kypseli Org for Ops Jobs')
        displayName('kypseli')
        triggers {
          periodic(2400)
        }
        organizations {
          github {
            repoOwner("kypseli")
            apiUri("https://api.github.com")
            credentialsId('cbdays-github-token')
            traits {
              publicRepoPullRequestFilterTrait()
            }
          }
        }
        configure {
            def traits = it / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
            traits << 'org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait' {
                strategyId 1
            }
            traits << 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait' {
                strategyId 2
                trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
            }
            traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                strategyId 2
            }
        }
        projectFactories {
          workflowMultiBranchProjectFactory {
            // Relative location within the checkout of your Pipeline script.
            scriptPath("OpsJenkinsfile")
          }
        }
      }
